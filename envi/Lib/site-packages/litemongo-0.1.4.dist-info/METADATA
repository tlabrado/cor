Metadata-Version: 2.1
Name: litemongo
Version: 0.1.4
Summary: File based MongoDB server with pymongo compatible API.
Keywords: mongodb,database,sqlite,disk-based
Author-email: Martin Uhrin <martin.uhrin.10@ucl.ac.uk>
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Classifier: Development Status :: 5 - Production/Stable
Classifier: License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)
Classifier: Operating System :: POSIX :: Linux
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Topic :: Scientific/Engineering
Requires-Dist: pymongo
Requires-Dist: setuptools
Requires-Dist: packaging
Requires-Dist: pytz
Requires-Dist: sentinels
Requires-Dist: h5py ; extra == "backends"
Requires-Dist: tables ; extra == "backends"
Requires-Dist: black[d] ; extra == "dev"
Requires-Dist: flit ; extra == "dev"
Requires-Dist: pre-commit ; extra == "dev"
Requires-Dist: pytest ; extra == "dev"
Provides-Extra: backends
Provides-Extra: dev

# LiteMongo

[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)
[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)
[![security: bandit](https://img.shields.io/badge/security-bandit-yellow.svg)](https://github.com/PyCQA/bandit)

## About

LiteMongo provides a drop-in replacement for `pymongo` without the need for a MongoDB server.
The database is stored on disk, making this an ideal tool for projects that require small MongoDB databases without wanting to go to the effort of installing the official server.
This is all made possible by building on top of the wonderful [Mongomock](https://github.com/mongomock/mongomock) library.


## Development

### Tests

Simply run `pytest`. For more detailed output, including test coverage:

```sh
pytest -vv --cov=. --cov-report term-missing
```

### Contributing

If you would like to contribute to the project:

- if you're making code contributions, please try and write some tests to accompany your code, and ensure that the tests pass.
- commit your changes via `cz commit`. Follow the prompts. When you're done, `pre-commit` will be invoked to ensure that your contributions and commits follow defined conventions. See `pre-commit-config.yaml` for more details.
- your commit messages should follow the conventions described [here](https://www.conventionalcommits.org/en/v1.0.0/). Write your commit message in the imperative: "Fix bug" and not "Fixed bug" or "Fixes bug." This convention matches up with commit messages generated by commands like `git merge` and `git revert`.
Once you are done, please send a [merge request](https://docs.gitlab.com/ee/user/project/merge_requests/).

----

